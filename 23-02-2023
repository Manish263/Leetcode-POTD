#include <queue>
#include <vector>
using namespace std;

int findMaximizedCapital(int k, int w, vector<int>& profits, vector<int>& capital) {
    // Sort projects by minimum capital requirement
    vector<pair<int, int>> projects;
    for (int i = 0; i < profits.size(); i++) {
        projects.push_back({capital[i], profits[i]});
    }
    sort(projects.begin(), projects.end());

    // Create max-heap to store profits of projects we can afford
    priority_queue<int> pq;

    int i = 0;  // Index of current project
    while (k--) {
        // Add profits of projects we can currently afford to max-heap
        while (i < projects.size() && projects[i].first <= w) {
            pq.push(projects[i].second);
            i++;
        }

        // Take the project with the highest profit from max-heap
        if (!pq.empty()) {
            w += pq.top();
            pq.pop();
        } else {
            break;  // No more affordable projects
        }
    }

    return w;
}
